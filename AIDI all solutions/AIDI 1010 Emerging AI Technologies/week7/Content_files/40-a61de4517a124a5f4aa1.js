(window.webpackJsonp=window.webpackJsonp||[]).push([[40,673],{BjFu:function(e,r,s){"use strict";s.d(r,"b",(function(){return M})),s.d(r,"c",(function(){return f})),s.d(r,"a",(function(){return g}));var t=s("D57K"),i=s("nsO7"),m=s("Llzl"),n=s("yC9S"),o=s("Fvsw"),a=s("go4a"),u=s("pjml"),h=s("zdqs"),d=s("SoDU"),c=s("fYJU"),p=s("VdDF"),l=s("aHpC"),b=s("zGdY"),T=s("KiLF");const M="ultra.service.termMembership",f="termMembership";function g(e,r=new Date){let s=e.startDate,t=e.endDate;return b.x.UseTerm===e.durationType&&e.term&&(s=e.term.startDate,t=e.term.endDate),p.a.isWithinDateRange(r,{start:s,end:t})}let D=class{constructor(e,r,s,t,i,m,o,a,u){this.$q=e,this.context=s,this.CourseModel=t,this.CourseMembershipModel=i,this.TermModel=m,this.UserModel=o,this.ExternalCourseModel=a,this.contextUser=u,n.b.OnRootScope(r,"courseUltraStatusChanged",((e,r,s)=>{this.updateCourseUltraStatus(r,s)}))}clear(){this.termsAndMemberships=void 0,this.loadPromise=void 0}getTermsAndMemberships(){return this.loadPromise?this.loadPromise:this.reloadTermsAndMemberships()}filterMemberships(e,r,s,t){return e&&Array.isArray(e)?e.filter((e=>(!e.course.isOrganization===r||!!e.course.isOrganization===s)&&(!t||t(e)))):[]}getCourseMembershipsFromArray(e,r){return this.filterMemberships(e,!0,!1,r)}getOrganizationMembershipsFromArray(e,r){return this.filterMemberships(e,!1,!0,r)}parseMembershipFromExternalCourse(e){const r=this.CourseMembershipModel.$new();return r.course=this.CourseModel.$new(),r.course.id=e.id,r.course.name=e.title,r.course.description=e.description,r.course.displayName=e.title,r.course.startDate=e.startDate,r.course.endDate=e.endDate,r.course.isAvailable=!0,r.course.durationType=b.x.DateRange,r.userId=e.userId,r.isAvailable=!0,r.userHasHidden=e.isHidden,r.courseCardColorIndex=parseInt((e.id||"0").replace(/_1$/,"").replace(/[^\d]/g,""),10),r.course.ui={courseColorClass:a.a(r),isExternal:!0,description:e.description,externalUrl:e.url},r}parseExternalCourseFromMembership(e){const r=this.ExternalCourseModel.$new(e.course.id);return r.id=e.course.id,r.title=e.course.name,r.startDate=e.course.startDate,r.endDate=e.course.endDate,r.userId=e.userId,r.description=e.course.ui.description,r.url=e.course.ui.externalUrl,r.isHidden=e.userHasHidden,r}reloadTermsAndMemberships(){const e=this.$q.defer();this.loadPromise=e.promise,this.termsAndMemberships={terms:[],termsByTermId:{},memberships:[],membershipsByTermId:{}};const r=this.context.getServerTime();return this.$q.all([this.getInternalMembership(),this.getExternalCoursesMembership(),this.updateTermsAndMemberships()]).then((([s,t])=>{this.termsAndMemberships.membershipsByTermId=Object.create(null),this.termsAndMemberships.memberships.splice(0,this.termsAndMemberships.memberships.length),(s=s.filter(((e,r,s)=>s.findIndex((r=>e.$pk===r.$pk))===r))).forEach((e=>{this.termsAndMemberships.memberships.push(e)})),t.forEach((e=>{this.termsAndMemberships.memberships.push(e)})),this.associateTermsWithCourses();const m=new d.a(this.TermModel,this.termsAndMemberships.terms);let n=new h.a(m).map(this.termsAndMemberships.memberships,r);n=this.applyStudentAvailabilityRules(n),n.forEach((e=>{const r=r=>{let s=this.termsAndMemberships.membershipsByTermId[r.id];s||(s=this.termsAndMemberships.membershipsByTermId[r.id]={memberships:[]}),s.memberships.push(e.membership)};r(e.term);const s=e.membership.course.term;!s||e.term!==m.currentTerm&&e.term!==m.upcomingTerm||r(s),this.buildTermRelationships(e)})),Object.keys(this.termsAndMemberships.membershipsByTermId).forEach((e=>{const r=this.termsAndMemberships.membershipsByTermId[e];r.memberships=i.sortBy(r.memberships,(e=>e.course.name))})),e.resolve(this.termsAndMemberships)})),this.loadPromise}getInternalMembership(){return this.contextUser.getMemberships().then((e=>(e.forEach((e=>{e.course&&(e.course.term&&(e.course.term.id=e.course.term.$pk),e.course.ui={courseColorClass:a.a(e)})})),this.getActiveMemberships(e))))}getActiveMemberships(e){return e.filter((e=>e.course&&e.isAvailable))}getExternalCoursesMembership(){return this.ExternalCourseModel.$search({limit:1e4}).$asPromise().then((e=>e.map((e=>this.parseMembershipFromExternalCourse(e)))))}updateTermsAndMemberships(){return this.TermModel.$search().$asPromise().then((e=>{this.termsAndMemberships.terms=i.orderBy(e,["startDate","durationType"],["asc","desc"]);const r=d.a.decorateTerm(new this.TermModel,u.Gb.ConstantTermId.CurrentTerm),s=d.a.decorateTerm(new this.TermModel,u.Gb.ConstantTermId.UpcomingTerm);this.termsAndMemberships.terms.push(r,s)}))}associateTermsWithCourses(){this.termsAndMemberships.memberships.forEach((e=>{e.course.term&&(e.course.term=this.termsAndMemberships.terms.find((r=>r.id===e.course.term.id)))}))}buildTermRelationships(e){const r=this.termsAndMemberships.termsByTermId[e.term.id];if(e.membership.course.term){if(e.term.id!==e.membership.course.term.id){if(!r)return void(this.termsAndMemberships.termsByTermId[e.term.id]=[e.membership.course.term]);r.indexOf(e.membership.course.term)<0&&r.push(e.membership.course.term)}}else;this.termsAndMemberships.termsByTermId[e.term.id]=i.orderBy(r,["startDate","name"],["desc","asc"])}applyStudentAvailabilityRules(e){return e.filter((e=>(e.membership.isStudentOrGuestMembership()&&e.membership.course.isUndecided()&&(e.membership.course.isAvailable=!1),!0)))}getCourseMembership(e){const r=this.findCourseMembership(e,this.termsAndMemberships.memberships);if(-1!==r)return this.termsAndMemberships.memberships[r]}findCourseMembership(e,r){return r.findIndex((r=>r.course.id===e))}updateCourseUltraStatus(e,r){let s=this.findCourseMembership(e,this.termsAndMemberships.memberships);-1!==s&&(this.termsAndMemberships.memberships[s].course.ultraStatus=r),Object.keys(this.termsAndMemberships.membershipsByTermId).forEach((t=>{s=this.findCourseMembership(e,this.termsAndMemberships.membershipsByTermId[t].memberships),-1!==s&&(this.termsAndMemberships.membershipsByTermId[t].memberships[s].course.ultraStatus=r)}))}filterAssociatedWithTermCourseMembershipsByTerm(e,r){return this.filterAssociatedWithTermCourseMemberships(e).filter((e=>e.course.term.id===r.id))}filterAssociatedWithTermCourseMemberships(e){return e.filter((e=>e.course.term&&!T.a.Continuous.isEqualTo(e.course.term.durationType)))}filterAssortedDatesCourseMemberships(e){return e.filter((e=>null==e.course.term||e.course.term&&T.a.Continuous.isEqualTo(e.course.term.durationType)))}};D=Object(t.a)([Object(t.c)(0,Object(l.b)("$q")),Object(t.c)(1,Object(l.b)("$rootScope")),Object(t.c)(2,Object(l.b)(o.b)),Object(t.c)(3,Object(l.b)(u.m.serviceName)),Object(t.c)(4,Object(l.b)(u.t.serviceName)),Object(t.c)(5,Object(l.b)(u.Gb.serviceName)),Object(t.c)(6,Object(l.b)(u.Jb.serviceName)),Object(t.c)(7,Object(l.b)(u.z.serviceName)),Object(t.c)(8,Object(l.b)(c.b))],D);m.module(M,[o.a,u.N]).service(f,D)},SHbF:function(e,r,s){var t=s("ziER"),i=s("5JeM"),m=new t({id:"icon-medium-attention",use:"icon-medium-attention-usage",viewBox:"0 0 24 24",content:'<symbol fill="none" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24" id="icon-medium-attention"><circle cx="12" cy="12" r="11" stroke-width="2" /><path d="M12.75 18.5a.75.75 0 11-1.5 0 .75.75 0 011.5 0z" stroke-width="1.5" stroke-miterlimit="10" stroke-linecap="round" /><path d="M12 15l-.5-10h1L12 15z" stroke-width="2" stroke-linecap="round" stroke-linejoin="round" /></symbol>'});i.add(m);e.exports=m},SoDU:function(e,r,s){"use strict";s.d(r,"a",(function(){return m}));var t=s("VdDF"),i=s("pjml");class m{constructor(e,r){this.TermModel=e,this.terms=r,this.currentTerm=this.getTerm(i.Gb.ConstantTermId.CurrentTerm),this.upcomingTerm=this.getTerm(i.Gb.ConstantTermId.UpcomingTerm)}getTerm(e){return this.terms.filter((r=>r.id===e))[0]}static decorateTerm(e,r){return e.id=r,e.ui={type:r},e}createYearTerm(e){const r=e.getFullYear(),s="year-"+r;let t=this.getTerm(s);return t||(t=new this.TermModel,t.id=s,t.ui={type:"year",year:r},t.startDate=new Date(r,0),this.addTerm(t)),t}addTerm(e){if(e)for(let r=0;r<this.terms.length;r++)if(this.terms[r].startDate>=e.startDate||this.terms[r]===this.currentTerm)return void this.terms.splice(r,0,e)}filterTerm(e){return this.terms.filter((r=>!!i.Gb.TermDuration.DateRange.isEqualTo(r.durationType)&&t.a.isWithinDateRange(e,{start:r.startDate,end:r.endDate})))}}},ptBS:function(e,r,s){var t=s("ziER"),i=s("5JeM"),m=new t({id:"icon-medium-messages",use:"icon-medium-messages-usage",viewBox:"0 0 24 24",content:'<symbol fill="none" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24" id="icon-medium-messages"><path d="M1 4v16h22V4H1z" stroke-width="2" stroke-linecap="round" stroke-linejoin="round" /><path d="M1 4l8.4419 7.6744L12 14l2.5581-2.3256L23 4M23 20c-3.3676-3.5207-5.5754-5.3288-8.4418-8.3256M1 20l8.4419-8.3256" stroke-width="2" stroke-linecap="round" stroke-linejoin="round" /></symbol>'});i.add(m);e.exports=m},zdqs:function(e,r,s){"use strict";s.d(r,"a",(function(){return o}));var t=s("nsO7"),i=s("VdDF"),m=s("pjml"),n=s("zGdY");class o{constructor(e){this.termUtil=e,this.membershipTermMapper=new a(this.termUtil)}getMembershipMapper(){return this.membershipTermMapper}map(e,r){return e.map((e=>({membership:e,term:this.membershipTermMapper.adjustTerm(e,r)})))}}class a{constructor(e){this.termUtil=e}adjustTerm(e,r){const s=this.getCourseDateRange(e);return s.start>r?e.course.ui.term=this.termUtil.upcomingTerm:i.a.isWithinDateRange(r,s)?e.course.ui.term=this.termUtil.currentTerm:e.course.term?e.course.ui.term=e.course.term:e.course.ui.term=this.getTermMappingBasedOnCourseDates(e,s,r),e.course.ui.term}getCourseDateRange(e){let r,s;if(n.x.DateRange===e.course.durationType)r=e.course.startDate,s=e.course.endDate;else if(n.x.FixedNumDays===e.course.durationType)r=e.enrollmentDate,s=new Date(e.enrollmentDate.getTime()),s.setDate(s.getDate()+e.course.numDaysOfUse);else if(n.x.UseTerm===e.course.durationType){const t=e.course.term?this.termUtil.getTerm(e.course.term.id):null;t&&(m.Gb.TermDuration.DateRange.isEqualTo(t.durationType)?(r=t.startDate,s=t.endDate):m.Gb.TermDuration.FixedNumDays.isEqualTo(t.durationType)&&(r=e.enrollmentDate,s=new Date(e.enrollmentDate.getTime()),s.setDate(s.getDate()+t.daysOfUse)))}return{end:s,start:r}}getTermMappingBasedOnCourseDates(e,r,s){let i=r.start||e.course.term&&e.course.term.startDate;if(!i){if(!(r.end&&s>r.end))return this.termUtil.currentTerm;i=r.end}const m=this.termUtil.filterTerm(i);if(0===m.length)return this.termUtil.createYearTerm(i);if(1===m.length)return m[0];if(m.length>1){const e=t.sortBy(m,["startDate","id"]);return e[e.length-1]}}}}}]);