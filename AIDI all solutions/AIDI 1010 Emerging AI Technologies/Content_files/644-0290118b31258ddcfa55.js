(window.webpackJsonp=window.webpackJsonp||[]).push([[644],{AHAn:function(e,s){e.exports='<div bb-load-bundle="components/directives/messages" ng-cloak class="messages-container-summary color-override" ng-class="course.ui.courseColorClass" ng-if="messagesToolIsAvailable">\n  <div class="row js-course-skip-link-target" ng-if="showMigrationInProgressScreen === true">\n    <div class="columns small-12 text-center no-messages js-migration-in-progress" tabindex="-1">\n      \x3c!--TODO: update the image to the Migration In Progress one when image is ready--\x3e\n      <img src="./static/images/ftue/ftuMMicon_NoMessages.png" role="presentation" />\n      <p class="main" bb-translate="components.directives.message.migrationInProgress.title"></p>\n    </div>\n  </div>\n  <div class="spinner bb-secondary-color-2" ng-if="isLoadingConversations" aria-hidden="true"></div>\n  <div class="messages-header js-course-skip-link-target flex-container"\n       ng-click="courseConversations.goToCourseMessagePeekState()"\n       analytics-id="components.directives.messages.courseConversationsSummary.goToCourseMessages">\n    <div class="flex-column-10" ng-if="showMigrationInProgressScreen == false && isLoadingConversations == false" >\n      <div class="subtitle">\n        <span bb-translate translate-values="{ course_id: course.displayId }">base.courses.idLabel</span>\n      </div>\n      <div class="flex-summary">\n        <h3 class="title ellipsis">\n          <span ng-if="courseConversations.isDisableTab">{{course.displayName}}</span>\n          <a ng-if="!courseConversations.isDisableTab" href="javascript:void(0);" analytics-id="components.directives.messages.courseConversationsSummary.goToCourseMessages.link">{{course.displayName}}</a>\n        </h3>\n        <div class="summary">\n          <div ng-if="unreadMessages > 0" class="unread-messages">{{unreadCount}}</div>\n        </div>\n      </div>\n    </div>\n    <div class="flex-column-1" ng-if="showMigrationInProgressScreen == false && isLoadingConversations == false && messagesToolIsAvailable">\n      <div class="information">\n        <div class="add-message-button guidance-wrapper" ng-if="!course.isClosed && course.canAccess() && !courseConversations.courseMessagesAreReadOnly">\n          <a href="javascript:void(0);"\n             bb-guidance-target component-key="messages.add"\n             show-guidance-target="{{courseConversations.isShowGuidance}}"\n             class="super-clear round right js-create-message"\n             bb-translate-attrs="{\'aria-label\': \'components.directives.message.newMessageForReader\', \'title\': \'components.directives.message.newMessageForReader\'}"\n             translate-attrs-values="{courseName: course.displayName}"\n             ng-class="{\'js-course-skip-link-target\': courseConversations.conversations.length === 0}"\n             tabindex="{{courseConversations.isDisableTab ? -1 : 0}}"\n             ng-click="courseConversations.goToCreateMessagePeekState($event)"\n             analytics-id="components.directives.messages.courseConversationsSummary.addMessageToCourse.link">\n            <bb-svg-icon icon="add-circle" size="medium"></bb-svg-icon>\n          </a>\n          <bb-guidance ng-if="courseConversations.isShowGuidance"\n                       component-key="messages.add"\n                       class="guidance-element-overlay push-right push-top">\n            <bb-translate>components.directives.message.ftue.addMessage</bb-translate>\n          </bb-guidance>\n        </div>\n      </div>\n    </div>\n  </div>\n\n  <div class="row js-course-skip-link-target" ng-if="messagesToolIsAvailable === false">\n    <div class="columns small-12 text-center no-messages" tabindex="-1">\n      <p class="caption" bb-translate="components.directives.message.notAllow.content" course-org-token-resolver></p>\n    </div>\n  </div>\n</div>\n'},UP8g:function(e,s,i){"use strict";(function(e){i.d(s,"b",(function(){return d})),i.d(s,"a",(function(){return b}));var t=i("nsO7"),r=i("lr7J"),n=i("0JpG"),a=i("pjml"),o=i("BjFu"),c=i("SoDU"),m=i("lEL+"),l=i("en1n");const d="ultra.base.messages.controller";class h{constructor(e,s,i,r,n,a,o,m,d,h){this.$scope=e,this.$q=s,this.CourseModel=i,this.CourseMembershipModel=r,this.TermModel=n,this.TermService=a,this.UserModel=o,this.bbLocalize=m,this.CourseConversationMessageModel=d,this.timeout=h,this.COURSE_CONVERSATION_LIST_COLUMN_PAGE_SIZE=15,this.courseCarouselReady=!1,this.courseCarousel=Object.create(null),this.bbMessagesFiltersByCourse=[],this.firstAvailableCourseUsed=!1,this.coursesInView={},this.carouselSlickOptions=[{breakpoint:l.c,settings:{centerMode:!1}}],this.isLoading=!0,e.baseMessages=this,e.$on("update-course-name",((e,s,i)=>{i.course=s,this.updateMembershipsByCourseName(i)})),this.isLoading=!0;const b=this.TermService.getTermsAndMemberships().then((s=>{this.cloneTermAndMembership(s),this.bbLocalize=m,this.backupTermAndMemberships(),this.initDisplayTermAndMemberships();const i=new c.a(n,this.termsAndMemberships.terms);this.currentTerm=i.currentTerm,m.loadBundle("features/base/messages/base-messages").then((()=>{const e=this.bbLocalize.translateSync({locale:this.bbLocalize.getLocale(this.$scope),key:"base.filter.allFilterName"});this.bbMessagesFiltersByCourse.push({id:null,name:e,title:e});for(const e in this.displayMemberships.membershipsByTermId)if(Object.prototype.hasOwnProperty.call(this.displayMemberships.membershipsByTermId,e)){this.displayMemberships.membershipsByTermId[e].memberships.forEach((e=>{e.course.id&&e.course.name&&!e.course.ui.isExternal&&this.bbMessagesFiltersByCourse.push({id:e.course.id,name:e.course.name,title:e.course.name})}))}this.bbMessagesFiltersByCourse&&(this.mySelectedFilter=this.bbMessagesFiltersByCourse[0])})),this.resetSlickCurrentIndex(),0===this.displayMemberships.terms.length&&e.firstSlideCreated()})),u=s.defer();e.firstSlideCreated=t.once((()=>{u.resolve()})),s.all([b,u.promise]).then((()=>{this.setupTermCarousel(),this.isLoading=!1}))}isFilteredByCourse(){return this.mySelectedFilter&&this.mySelectedFilter.id}updateMembershipsByCourseName(e){for(let s=0;s<this.displayMemberships.terms.length;s++){const i=this.displayMemberships.membershipsByTermId[this.displayMemberships.terms[s].id].memberships;for(let s=0;s<i.length;s++)if(e.course.id===i[s].course.id){i[s].course.name=e.course.name;break}}}initDisplayTermAndMemberships(){this.displayMemberships={terms:[],memberships:[],membershipsByTermId:{}},Object.keys(this.termsAndMemberships.membershipsByTermId).forEach((e=>{this.displayMemberships.membershipsByTermId[e]={memberships:[]};const s=this.termsAndMemberships.membershipsByTermId[e].memberships;s&&(s.forEach((s=>{s.isStudentMembership()||s.isGuestMembership()?(s.courseIsOpen()||s.courseIsComplete())&&this.displayMemberships.membershipsByTermId[e].memberships.push(s):this.displayMemberships.membershipsByTermId[e].memberships.push(s)})),this.coursesInView[e]=this.COURSE_CONVERSATION_LIST_COLUMN_PAGE_SIZE)})),this.displayMemberships.terms=this.filterNonEmptyTerms()}cloneTermAndMembership(e){this.termsAndMemberships={terms:[],memberships:[],membershipsByTermId:{}},this.termsAndMemberships.terms=t.cloneDeep(e.terms),this.termsAndMemberships.memberships=t.cloneDeep(e.memberships),Object.keys(e.membershipsByTermId).forEach((s=>{this.termsAndMemberships.membershipsByTermId[s]={memberships:void 0},this.termsAndMemberships.membershipsByTermId[s].memberships=t.clone(e.membershipsByTermId[s].memberships)}))}backupTermAndMemberships(){this.termsAndMembershipsRaw={terms:[],memberships:[],membershipsByTermId:{}},Object.keys(this.termsAndMemberships.membershipsByTermId).forEach((e=>{this.termsAndMembershipsRaw.membershipsByTermId[e]={memberships:void 0},this.termsAndMembershipsRaw.membershipsByTermId[e].memberships=t.clone(this.termsAndMemberships.membershipsByTermId[e].memberships)}))}restoreTermAndMemberships(){Object.keys(this.termsAndMembershipsRaw.membershipsByTermId).forEach((e=>{this.termsAndMemberships.membershipsByTermId[e]={memberships:void 0},this.termsAndMemberships.membershipsByTermId[e].memberships=t.clone(this.termsAndMembershipsRaw.membershipsByTermId[e].memberships)}))}filterNonEmptyTerms(){const e=[];return this.termsAndMemberships.terms.forEach((s=>{this.displayMemberships.membershipsByTermId[s.id]&&this.displayMemberships.membershipsByTermId[s.id].memberships.length>0&&e.push(s)})),e}setupTermCarousel(){this.displayMemberships.terms.length>0&&(this.courseCarousel.init(),this.toUpdateSlide=!1,this.courseCarouselReady=!0)}changeFilter(e){this.mySelectedFilter=e}filterMessagesByCourse(){this.restoreTermAndMemberships(),this.mySelectedFilter&&this.filterCourses(this.termsAndMemberships,this.mySelectedFilter),this.initDisplayTermAndMemberships(),this.isFilteredByCourse()?this.slickCurrentIndex=0:this.resetSlickCurrentIndex(),this.toUpdateSlide=!0}resetSlickCurrentIndex(){this.slickCurrentIndex=this.displayMemberships.terms.indexOf(this.currentTerm),this.slickCurrentIndex<0&&(this.slickCurrentIndex=0)}filterCourses(e,s){for(let i=0;i<e.terms.length;++i){const t=e.terms[i];if(null==e.membershipsByTermId[t.id])continue;const r=e.membershipsByTermId[t.id].memberships;e.membershipsByTermId[t.id].memberships=r.filter((e=>!s.id||e.course.id===s.id)),e.membershipsByTermId[t.id].memberships||(e.membershipsByTermId[t.id]=null)}}updateSlick(){this.filterMessagesByCourse()}isFirstAvaiableCourseInCurrentTerm(e,s){return!(!s.isOpen()||this.firstAvailableCourseUsed||this.currentTerm.id!==e.id)&&(this.firstAvailableCourseUsed=!0,!0)}isDiffTermWithCurrent(e){return this.slickCurrentIndex!==this.displayMemberships.terms.indexOf(e)}focusTerm(e){this.slickCurrentIndex=this.displayMemberships.terms.indexOf(e),this.courseCarousel.slick("slickGoTo",this.slickCurrentIndex)}get currentTermInView(){return e("#body-content .slick-slide.slick-current").attr("data-term-id")}getCoursesByTerm(e){if(!this.displayMemberships||!this.displayMemberships.membershipsByTermId||!this.displayMemberships.membershipsByTermId[e])return;const s=t.take(this.displayMemberships.membershipsByTermId[e].memberships||[],this.coursesInView[e]||0);return s.length<this.coursesInView[e]&&(this.coursesInView[e]=s.length),s}loadMoreCourses(e){if(!e)return;const s=e.id;if(this.currentTermInView===s&&this.displayMemberships.membershipsByTermId[s].memberships.length>this.coursesInView[s]){const e=this.$q.defer();this.$scope.$root.$broadcast(r.a,"base-messages-"+s,e.promise),this.timeout((()=>{this.coursesInView[s]+=this.COURSE_CONVERSATION_LIST_COLUMN_PAGE_SIZE,e.resolve()}),this.$scope,0)}}}h.$inject=["$scope","$q",a.m.serviceName,a.t.serviceName,a.Gb.serviceName,o.c,a.Jb.serviceName,n.serviceName,a.r.serviceName,m.b];class b extends h{}}).call(this,i("71td"))},ZQ8w:function(e,s,i){"use strict";i.r(s);var t=i("Llzl"),r=i("UP8g"),n=i("D57K"),a=(i("smDF"),i("k6nO"),i("Fvsw")),o=i("ZzYr"),c=i("pjml"),m=i("5RJJ"),l=i("5MwF");const d="ultra.components.services.courseConversationsMigrationProgress",h="courseConversationsMigrationProgressService";class b{constructor(e){this.$http=e,this.isMigrationInProgress=e=>this.$http({method:"GET",url:l.a.apiBasePath+"/v1/utilities/migration/coursemessages/inprogress?course_id="+e}).then((e=>e.data.success&&e.data.inProgress&&e.data.isCourseBeingMigrated))}}b.$inject=["$http"],t.module(d,[]).service(h,b);var u=i("TnpK"),p=i("0JpG"),g=i("Q/M7"),v=i("aHpC"),y=i("kk+D"),M=i("IbyE"),C=i("AHAn");const f="ultra.directives.bbCourseConversationsSummary",T="/webapps/blackboard/messaging/course",I="student_messages_readonly_mode";let w=class{constructor(e,s,i,t,r,n,a,o,c,m,l,d){this.$q=e,this.scope=s,this.$rootScope=i,this.$http=t,this.$ngRedux=r,this.CourseModel=n,this.ConversationModel=a,this.conversationMigrationService=o,this.membershipService=c,this.context=m,this.ultraState=l,this.localize=d,this.isShowGuidance=!1,this.courseMessagesAreReadOnly=!0,this.isShowGuidance=s.isShowGuidance,this.courseMembership=s.courseMembership,this.scope.isLoadingConversations=!0,this.membershipService.getMsgToolAvailability(this.scope.course).then((e=>{this.updateAvailabilityToStudent(e),this.refreshCourseConversations()})),this.scope.$on("bb-message-refresh",this.refreshCourseConversations.bind(this)),this.scope.$on("bb-message-create",this.refreshCourseConversations.bind(this)),this.scope.$on("bb-message-delete",this.refreshCourseConversations.bind(this)),this.scope.$on("reloadCourse",this.refreshCourseConversations.bind(this)),this.subscribeToRedux(),this.loadReadOnlyPreference({key:I})}subscribeToRedux(){const e=this.$ngRedux.connect((e=>this.courseMembership.isStudentMembership()?{courseMessagesAreReadOnly:Object(y.a)(e,I,!0)}:{courseMessagesAreReadOnly:!1}),(e=>({loadReadOnlyPreference:s=>{e(M.V.systemPreference.loadSystemPreference(s))}})))(this);this.scope.$on("$destroy",e)}goToCourseMessagePeekState(){this.isUltraCourse()?this.ultraState.goPeekState("course.messages",{courseId:this.scope.course.id}):this.getOriginalCourseMessageUrl()}updateAvailabilityToStudent(e){this.courseMembership.isStudentOrGuestMembership()?this.scope.messagesToolIsAvailable=e:this.scope.messagesToolIsAvailable=!0}goToCreateMessagePeekState(e){e.stopPropagation(),this.isUltraCourse()?this.ultraState.goPeekState("create-message",{courseId:this.scope.course.id}):this.ultraState.goPeekState("course.outline",{courseId:this.scope.course.id,legacyUrl:g.f(T,"composeMessage.jsp",{course_id:this.scope.course.id})})}isUltraCourse(){return this.scope.course.isUltra()}getOriginalCourseMessageUrl(){this.ultraState.goPeekState("course.outline",{courseId:this.scope.course.id,legacyUrl:g.f(T,"folderList.jsp",{course_id:this.scope.course.id})})}refreshCourseConversations(e,s){s&&s!==this.scope.course.id||(this.scope.isLoadingConversations=!0,this.CourseModel.$new(this.scope.course.id).$then((e=>{e.conversationCounts.$resolve().$asPromise().then((e=>{this.scope.totalMessages=e.totalCount,this.scope.unreadMessages=e.unreadCount,this.scope.isLoadingConversations=!1,this.scope.unreadCount=this.scope.unreadMessages>99?this.localize.translateSync({locale:this.localize.getLocale(this.scope),key:"components.directives.message.unreadMessagesMax"}):this.localize.formatNumberSync(this.scope.unreadMessages,this.scope).toString()}))})),this.conversationMigrationService.isMigrationInProgress(this.scope.course.id).then((e=>{this.scope.showMigrationInProgressScreen=e})))}};w=Object(n.a)([Object(n.c)(0,Object(v.b)("$q")),Object(n.c)(1,Object(v.b)("scope")),Object(n.c)(2,Object(v.b)("$rootScope")),Object(n.c)(3,Object(v.b)("$http")),Object(n.c)(4,Object(v.b)("$ngRedux")),Object(n.c)(5,Object(v.b)(c.m.serviceName)),Object(n.c)(6,Object(v.b)(c.q.serviceName)),Object(n.c)(7,Object(v.b)(h)),Object(n.c)(8,Object(v.b)(m.b)),Object(n.c)(9,Object(v.b)(a.b)),Object(n.c)(10,Object(v.b)(u.d)),Object(n.c)(11,Object(v.b)(p.serviceName))],w);class S{constructor(e){this.$injector=e,this.link=(e,s)=>{e.courseConversations=this.$injector.instantiate(w,{scope:e})},this.restrict="E",this.scope={course:"=",courseMembership:"<",isShowGuidance:"=?"},this.template=C}}S.$inject=["$injector"],t.module(f,[m.a,a.a,d,o.a,u.b,c.N]).directive("bbCourseConversationsSummary",["$injector",e=>e.instantiate(S)]);var k=i("P4+T"),O=i("r133"),x=i("lr7J"),A=i("HdfQ"),B=i("BjFu"),j=i("lEL+"),$=i("k7OZ");i.d(s,"moduleName",(function(){return N})),i.d(s,"controllerName",(function(){return P})),i.d(s,"template",(function(){return $}));const N="ultra.base.messages",P=r.b;t.module(N,[f,k.a,O.a,a.a,x.b,c.N,A.a,B.b,j.a]).controller(r.b,r.a)},k6nO:function(e,s,i){var t=i("ziER"),r=i("5JeM"),n=new t({id:"icon-medium-trash",use:"icon-medium-trash-usage",viewBox:"0 0 24 24",content:'<symbol fill="none" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24" id="icon-medium-trash"><path d="M3.5 7h17M3 4l2 19h14l2-19M8 4V1h8v3M2 4h20M8 10l1 10M12 10v10M16 10l-1 10" stroke-width="2" stroke-linecap="round" stroke-linejoin="round" /></symbol>'});r.add(n);e.exports=n},k7OZ:function(e,s){e.exports='<div class="base-messages-container" bb-first-time-container bb-cache-compilation="base-messages" bb-offcanvas-pausal-scope>\n  \x3c!-- remove the whole filter when this feature goes live --\x3e\n  <div>\n    <bb-base-header page-title-key="base.messages.pageTitle" has-filter="false"></bb-base-header>\n  </div>\n\n  <div id="body-content">\n    <div ng-style="{ visibility: baseMessages.courseCarouselReady ? \'\' : \'hidden\' }" class="base-messages" ng-if="baseMessages.displayMemberships.terms.length !== 0">\n      <button class="semester-nav-button prev button button--icon super-clear icon-arrow-left"\n              tabindex="0"\n              bb-translate-attrs="{\'aria-label\': \'base.messages.previousTerm\', \'title\': \'base.messages.previousTerm\'}"\n              analytics-id="features.base.messages.baseMessages.previousTerm.button"></button>\n\n      <button class="semester-nav-button next button button--icon super-clear icon-arrow-right"\n              tabindex="0"\n              bb-translate-attrs="{\'aria-label\': \'base.messages.nextTerm\', \'title\': \'base.messages.nextTerm\'}"\n              analytics-id="features.base.messages.baseMessages.nextTerm.button"></button>\n\n      <div class="slick-header"></div>\n      <div class="js-course-carousel"\n           bb-slick accessibility="false"\n           center-mode="true"\n           center-padding="10px"\n           slides-to-show="1"\n           responsive="baseMessages.carouselSlickOptions"\n           infinite="false"\n           init-onload="true"\n           initial-slide="baseMessages.slickCurrentIndex"\n           data="baseMessages.mySelectedFilter"\n           prev-arrow=".base-messages .prev"\n           next-arrow=".base-messages .next"\n           slick-handle="baseMessages.courseCarousel"\n           slides-to-scroll="1"\n           bb-arrow-key-navigation="{ layout: \'columns\' }"\n           current-index="baseMessages.slickCurrentIndex"\n           to-update-slide="baseMessages.toUpdateSlide"\n           on-update="baseMessages.updateSlick()"\n           disable-off-screen-slides="true">\n        <div ng-repeat="term in baseMessages.displayMemberships.terms track by $index" class="columns large-4" bb-arrow-key-container="true"\n             id="container-term-{{term.id}}" data-term-id="{{term.id}}">\n          <div class="course-list"\n               ng-init="firstSlideCreated($index)"\n               bb-arrow-key-destination="true"\n               bb-infinite-scroll="baseMessages.loadMoreCourses(term)"\n               infinite-scroll-container="\'#main-content-inner\'"\n               infinite-scroll-disabled="term.id !== baseMessages.currentTermInView"\n               infinite-scroll-immediate-check="term.id !== baseMessages.currentTermInView"\n               infinite-scroll-current-count="baseMessages.getCoursesByTerm(term.id).length"\n               infinite-scroll-total-count="baseMessages.displayMemberships.membershipsByTermId[term.id].memberships.length"\n               infinite-scroll-load-limit="baseMessages.COURSE_CONVERSATION_LIST_COLUMN_PAGE_SIZE"\n               infinite-scroll-tray-id="base-messages-{{::term.id}}"\n               infinite-scroll-focusable-children-selector=".messages-header h2 a"\n               infinite-scroll-localization-keys-prefix="base.messages.infiniteScroll"\n               infinite-scroll-localization-values="{term: term.name || term.id}">\n\n            <h2 class="semester active-term wide-slide">\n              \x3c!--use button for terms that are not in focus; setting a non-actionable role with a negative tabindex\n               on a button will not work--\x3e\n              <button ng-click="baseMessages.focusTerm(term)"\n                      id="course-list-term-{{term.id}}"\n                      ng-show="$index !== baseMessages.slickCurrentIndex"\n                      analytics-id="features.base.messages.baseMessages.focusTerm.button">\n                <ng-switch on="term.ui.type">\n                  <span ng-switch-when="current" bb-translate-attrs="{\'title\': \'base.messages.currentCourses\'}" bb-translate>base.messages.currentCourses</span>\n                  <span ng-switch-when="upcoming" bb-translate-attrs="{\'title\': \'base.messages.upcomingCourses\'}" bb-translate>base.messages.upcomingCourses</span>\n                  <span ng-switch-when="year" bb-translate-attrs="{\'title\': \'base.messages.yearTerm\'}" translate-attrs-values="{year: term.ui.year}"\n                        bb-translate translate-values="{ year: term.ui.year }">base.messages.yearTerm</span>\n                  <span ng-switch-default title="{{ term.name }}" >{{ term.name }}</span>\n                </ng-switch>\n              </button>\n\n              \x3c!--use a span element on the current term in focus--\x3e\n              <span ng-show="$index === baseMessages.slickCurrentIndex">\n                <ng-switch on="term.ui.type">\n                  <span ng-switch-when="current" bb-translate-attrs="{\'title\': \'base.messages.currentCourses\'}" bb-translate>base.messages.currentCourses</span>\n                  <span ng-switch-when="upcoming" bb-translate-attrs="{\'title\': \'base.messages.upcomingCourses\'}" bb-translate>base.messages.upcomingCourses</span>\n                  <span ng-switch-when="year" bb-translate-attrs="{\'title\': \'base.messages.yearTerm\'}" translate-attrs-values="{year: term.ui.year}"\n                        bb-translate translate-values="{ year: term.ui.year }">base.messages.yearTerm</span>\n                  <span ng-switch-default title="{{ term.name }}" >{{ term.name }}</span>\n                </ng-switch>\n              </span>\n            </h2>\n\n            <div class="messages-list" ng-if="$index === baseMessages.slickCurrentIndex">\n              <div ng-repeat="membership in baseMessages.getCoursesByTerm(term.id)" data-course-id="{{::membership.course.id}}">\n                <bb-course-conversations-summary\n                  ng-if="!membership.course.ui.isExternal"\n                  is-disable-tab="baseMessages.isDiffTermWithCurrent(term)"\n                  course="membership.course"\n                  course-membership="membership"\n                  is-show-guidance="baseMessages.isFirstAvaiableCourseInCurrentTerm(term, membership.course)"\n                >\n                </bb-course-conversations-summary>\n              </div>\n            </div>\n\n          </div>\n        </div>\n      </div>\n    </div>\n    <div class="row base-messages no-messages-container" ng-if="baseMessages.displayMemberships.terms.length === 0">\n      <div class="small-12 text-center no-messages" tabindex="-1">\n        <img src="./static/images/ftue/ftuMMicon_NoMessages.png" role="presentation" bb-translate-attrs="{\'alt\': \'base.messages.noMessages.alt\'}" />\n        <p class="main" bb-translate="base.messages.noMessages.title"></p>\n        <p class="caption" bb-translate="base.messages.noMessages.content"></p>\n      </div>\n    </div>\n\n    <div ui-view></div>\n    <div class="spinner bb-secondary-color-2 relatively-centered" ng-show="baseMessages.isLoading" aria-hidden="true"></div>\n  </div>\n</div>\n'}}]);