(window.webpackJsonp=window.webpackJsonp||[]).push([[574],{"09dT":function(e,t,s){"use strict";s.r(t);var r=s("Llzl"),a=s("D57K"),i=(s("px9Z"),s("fYJU")),n=s("o5Lu"),c=s("TnpK"),o=s("RSqr"),l=s("ELoy"),d=s("I1Ik"),u=s("2Ye3"),h=s("aHpC");const m="ultra.directives.telemetry.studentProgress";let p=class{constructor(e,t,s,r,a){this.scope=e,this.$stateParams=t,this.contextUser=s,this.state=r,this.gradeService=a,this.courseId=t.courseId,this.user=this.contextUser.userModel,"base.grades"===this.state.getBaseState()?this.subtitle="components.directives.telemetry.panel.progressSubtitleGrades":this.subtitle="components.directives.telemetry.panel.progressSubtitleStream",this.gradeService.fetchNeedsToSetupOverallGrade(this.courseId).then((e=>{this.needsToSetupOverall=e}))}analyticsContext(){return{contextType:"telemetryStudentProgress",courseId:this.courseId}}activityDataLoaded(e,t,s){this.dataLoaded=!0,this.activitySeriesTitle=s,this.hasNoActivityData=0===t,this.showNoDataGraphic=this.hasNoActivityData&&this.hasNoGradeData}gradeDataLoaded(e,t,s){this.dataLoaded=!0,this.gradeSeriesTitle=s,this.hasNoGradeData=0===t,this.showNoDataGraphic=this.hasNoActivityData&&this.hasNoGradeData}};p=Object(a.a)([Object(a.c)(0,Object(h.b)("scope")),Object(a.c)(1,Object(h.b)("$stateParams")),Object(a.c)(2,Object(h.b)(i.b)),Object(a.c)(3,Object(h.b)(c.d)),Object(a.c)(4,Object(h.b)(n.n))],p);class v{constructor(e){this.$injector=e,this.restrict="E",this.template=u,this.scope={course:"&",courseColor:"@"},this.link=e=>{e.telemetryStudentProgress=this.$injector.instantiate(p,{scope:e})}}}v.$inject=["$injector"],r.module(m,[o.a,l.a,d.a]).directive("bbTelemetryStudentProgress",["$injector",e=>e.instantiate(v)]);var b=s("LUgW"),y=s("p/6/");s.d(t,"moduleName",(function(){return g})),s.d(t,"controllerName",(function(){return S})),s.d(t,"template",(function(){return y}));const g="ultra.telemetry.studentProgress",S=b.b;r.module(g,[m]).controller(b.b,b.a)},"2Ye3":function(e,t){e.exports='<div class="panel-wrap telemetry-panel telemetry-student-progress" ng-class="::courseColor" bb-first-time-container>\n  <bb-telemetry-panel-header title-key="components.directives.telemetry.panel.progressTitle"\n                             course="course()"\n                             panel-data-loaded="telemetryStudentProgress.dataLoaded"></bb-telemetry-panel-header>\n  <div class="telemetry-panel-content panel-content">\n    <p bb-translate translate-values="::{ courseName: course().name }">{{ ::telemetryStudentProgress.subtitle }}</p>\n    <div class="telemetry-details">\n      <p class="insufficient-data-warning" bb-translate>components.directives.telemetry.panel.insufficientDataWarning</p>\n      <span class="no-overall-grade-setup" ng-if="telemetryStudentProgress.needsToSetupOverall" bb-translate>components.directives.telemetry.panel.noOverallGradeStudent</span>\n      <a class="learn-more-link"\n         bb-translate-attrs="{\'href\': \'components.directives.telemetry.panel.learnMoreLink\'}"\n         href=""\n         target="_blank"\n         analytics-id="components.directives.telemetry.studentProgress.learnMore.link"\n         bb-translate>\n        components.directives.telemetry.learnMore\n      </a>\n    </div>\n    <section ng-show="telemetryStudentProgress.dataLoaded" class="full activity-grade student-low-performance">\n      <h2 class="peek-chart-title">{{ ::telemetryStudentProgress.gradeSeriesTitle }}</h2>\n      <bb-telemetry-time-series class="js-telemetry-time-series-grade"\n                                course="course()"\n                                ng-if="telemetryStudentProgress.user && !telemetryStudentProgress.needsToSetupOverall"\n                                user="telemetryStudentProgress.user"\n                                type="grades"\n                                on-data-loaded="telemetryStudentProgress.gradeDataLoaded(studentPointCount, coursePointCount, chartTitle)"\n                                can-view-all-user-data="false">\n      </bb-telemetry-time-series>\n      <h2 class="peek-chart-title non-first-time-series">{{ ::telemetryStudentProgress.activitySeriesTitle }}</h2>\n      <bb-telemetry-time-series class="js-telemetry-time-series-activity"\n                                course="course()"\n                                ng-if="telemetryStudentProgress.user"\n                                user="telemetryStudentProgress.user"\n                                type="activity"\n                                on-data-loaded="telemetryStudentProgress.activityDataLoaded(studentPointCount, coursePointCount, chartTitle)"\n                                can-view-all-user-data="false">\n      </bb-telemetry-time-series>\n      <div ng-if="telemetryStudentProgress.showNoDataGraphic" class="react-container">\n        <bb-no-data-graphic></bb-no-data-graphic>\n      </div>\n    </section>\n  </div>\n</div>\n\n'},"6WQB":function(e,t){e.exports='<div class="telemetry-tooltip">\n  \x3c!-- The series name has already been translated in the controller, so it\'s safe to use ng-bind-html below --\x3e\n  <strong ng-bind-html="seriesName" ng-if="canViewAllUserData"></strong><br ng-if="canViewAllUserData"/>\n  <span ng-if="canViewAllUserData">{{::dateText}}</span><br ng-if="canViewAllUserData"/>\n  <span ng-if="!stdDev">{{::yValueText}}</span>\n  <span ng-if="stdDev">{{::yValueWithStdDevText}}</span>\n</div>'},A51O:function(e,t,s){var r=s("ziER"),a=s("5JeM"),i=new r({id:"icon-small-arrow-right",use:"icon-small-arrow-right-usage",viewBox:"0 0 16 16",content:'<symbol fill="none" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 16 16" id="icon-small-arrow-right"><path d="M5 1l7 7-7 7" stroke-width="2" stroke-linecap="round" stroke-linejoin="round" /></symbol>'});a.add(i);e.exports=i},Ew9L:function(e,t){e.exports='<div bb-load-bundle="components/directives/userpicker" class="user-picker">\n  <div ng-if="gridView()" class="avatar-container" ng-repeat="user in userList() track by user.id">\n    <div class="element-image avatar">\n      <bb-avatar user="user"\n                 id="userpicker-{{user.id}}-grid-avatar"\n                 ng-click="userPicker.userDetails({user: user})"\n                 analytics-id-tag-prefix="components.directives.userPicker.gridView"></bb-avatar>\n    </div>\n  </div>\n  <ul ng-if="!gridView()" class="element-card-list" role="listbox" aria-multiselectable="true">\n    <li class="student-details-row" ng-repeat="user in userList() | orderBy: \'givenName\' track by user.id" bb-click-to-invoke-child="a.progress-details-arrow" ng-show="(!selected() && !user.ui.searchNotMatched) || selected()">\n      <div id="userpicker-{{user.id}}-card" class="element-card" ng-class="{ \'unchecked\': !selected(), \'search-no-match\': user.ui.searchNotMatched }">\n        <bb-avatar id="userpicker-{{user.id}}-list-avatar"\n                   user="user"\n                   customized-active-style="{{ ::avatarCustomizedActiveStyle }}"\n                   analytics-id-tag-prefix="components.directives.userPicker"></bb-avatar>\n        <div class="element-details">\n          <button\n             ng-click="userPicker.userClicked(user)"\n             id="userpicker-{{user.id}}-checkbox"\n             class="label-link name-title ng-isolate-scope ellipsis button-anchor userpicker-button"\n             bb-username user="user"\n             role="option"\n             aria-selected="{{ selected()  ? \'true\' : \'false\'}}"\n             analytics-id="components.directives.userpicker.userClicked.button"></button>\n        </div>\n      </div>\n      <a ng-click="userPicker.userDetails(user)"\n         class="progress-details-arrow"\n         href="javascript:void(0);"\n         analytics-id="components.directives.userpicker.userPicker.userDetails.link">\n        <span class="sr-only">{{::userPicker.studentDetails(user)}}</span>\n        <bb-svg-icon size="small" icon="arrow-right"></bb-svg-icon>\n      </a>\n    </li>\n  </ul>\n</div>\n\n'},I1Ik:function(e,t,s){"use strict";var r=s("Llzl"),a=s("ERkP"),i=s("C+e0"),n=s("1ZbL"),c=s("Agfx");const o=Object(c.makeStyles)((()=>Object(c.createStyles)({root:{textAlign:"center",margin:"0px",padding:"40px 0px","& img":{width:"251px",height:"173px"}},chartNoDataHeading:{fontSize:"22px",margin:"33px 0px 15px"},chartNoDataSubHeading:{width:"310px",margin:"0px auto",lineHeight:"18px"}})));s.d(t,"a",(function(){return l}));const l="ultra.components.directives.noDataGraphic",d={Class:Object(i.a)((e=>{const{localize:t}=e,s=o(e);return a.createElement("div",{className:s.root},a.createElement("img",{src:"./static/images/ftue/noData-icon.svg",alt:""}),a.createElement("h3",{className:s.chartNoDataHeading},t.translate("components.directives.telemetry.chart.noDataHeadline")),a.createElement("p",{className:s.chartNoDataSubHeading},t.translate("components.directives.telemetry.chart.noDataSubHeadline")))})),renderLocalized:!0};r.module(l,[]).component("bbNoDataGraphic",Object(n.a)(d))},LUgW:function(e,t,s){"use strict";s.d(t,"b",(function(){return r})),s.d(t,"a",(function(){return i}));const r="ultra.features.telemetry.instructor.class.telemetry-generic-peek.controller";class a{constructor(e,t,s){this.$scope=e,this.course=t,this.courseColor=s,e.controller=this}}a.$inject=["$scope","currentCourse","currentCourseColor"];class i extends a{}},RSqr:function(e,t,s){"use strict";s("P6hh"),s("px9Z");var r=s("Llzl"),a=s("D57K"),i=(s("zC/t"),s("0JpG")),n=s("pjml"),c=s("BOsd"),o=s("r6lH"),l=s("m16R"),d=s("1ovh"),u=s("jzS3"),h=s("o5Lu"),m=s("ZQFV"),p=s("6WQB"),v=s("aHpC");let b=class{constructor(e,t,s,r,a,i,n,c,o){let l;this.$compile=e,this.$q=t,this.$scope=s,this.telemetry=r,this.telemetryChart=a,this.CourseModel=i,this.UserModel=n,this.bbLocalize=c,this.gradeService=o,this.activityTransformer=new u.a,this.gradeTransformer=new u.d,this.granularity=7,s.telemetry=this,this.dataType=Object(d.c)(s.type)||d.a.Activity,this.canViewAllUserData=this.$scope.canViewAllUserData(),this.timeSeriesTooltip=e(p),this.courseId=this.$scope.course().id,l=this.dataType===d.a.Grades?this.loadCourseGradeData():this.loadCourseActivityData(),this.$q.all([this.$scope.user().$asPromise(),l]).then((()=>{this.userId=this.$scope.user().id,this.chart?this.dataType===d.a.Grades?this.loadStudentGradeData():this.loadStudentActivityData():this.fireEmptyOnDataLoaded()})),this.initializeGradepillSettings()}initializeGradepillSettings(){this.gradePillSettings={pointsPossible:100,variant:m.p.Percentage},this.gradeService.colorSettings.isColorEnabled||(this.gradePillSettings={...this.gradePillSettings,colorDefault:m.G.Black})}loadCourseGradeData(){return this.telemetry.loadCourseGradeData(this.courseId).then((e=>{e.courseGrades&&e.courseGrades.length>0&&(this.chart=this.createTimeSeriesConfig("components.directives.telemetry.chart.gradeAxis","components.directives.telemetry.chart.tooltip.grade","components.directives.telemetry.chart.tooltip.gradeWithStdDev","components.directives.telemetry.chart.gradeAxisLabel",!0),this.chart.courseAverageSeries.data=e.courseGrades.map(this.gradeTransformer.getCoursePoint),this.chart.courseAverageSeries.name=this.bbLocalize.translateSync({locale:this.bbLocalize.getLocale(this.$scope),key:"components.directives.telemetry.chart.classGradeSeries",params:{courseName:this.$scope.course().name}}),this.chart.courseAverageSeries.showInLegend=!0,this.chart.stdDevSeries.data=e.courseGrades.map(this.gradeTransformer.getRange),this.courseGradeData=e)}))}loadCourseActivityData(){return this.telemetry.loadCourseActivityData(this.courseId).then((e=>{e.courseActivity&&e.courseActivity.length>0&&(this.chart=this.createTimeSeriesConfig("components.directives.telemetry.chart.activityAxis","components.directives.telemetry.chart.tooltip.activity","components.directives.telemetry.chart.tooltip.activityWithStdDev","components.directives.telemetry.chart.activityAxisLabel"),this.chart.courseAverageSeries.data=e.courseActivity.map(this.activityTransformer.getCoursePoint),this.chart.courseAverageSeries.name=this.bbLocalize.translateSync({locale:this.bbLocalize.getLocale(this.$scope),key:"components.directives.telemetry.chart.classActivitySeries",params:{courseName:this.$scope.course().name}}),this.chart.courseAverageSeries.showInLegend=!0,this.chart.stdDevSeries.data=e.courseActivity.map(this.activityTransformer.getRange),this.courseActivityData=e)}))}loadStudentGradeData(){const e=this.telemetry.loadStudentGradeData(this.courseId,this.userId),t=this.telemetry.loadNotifications(this.courseId,this.userId);return this.$q.all({grades:e,notifications:t}).then((e=>{if(e.grades.studentGrades){const t=e.grades.studentGrades,s=this.courseGradeData.courseGrades,r=this.canViewAllUserData?"components.directives.telemetry.chart.gradeTitleInstructor":"components.directives.telemetry.chart.gradeTitleStudent",a=this.canViewAllUserData?"components.directives.telemetry.chart.currentStudentGradeSeriesInstructor":"components.directives.telemetry.chart.currentStudentGradeSeriesStudent",i=this.gradeTransformer.getTableRows(t,s);this.table=new l.c(i,r,this.createUserNameString()),this.configureStudentSeries(e.grades.studentGrades,e.notifications,this.gradeTransformer,a,r,this.chart),this.fireOnDataLoaded()}}))}loadStudentActivityData(){const e=this.telemetry.loadStudentActivityData(this.courseId,this.userId),t=this.telemetry.loadNotifications(this.courseId,this.userId);return this.$q.all({activity:e,notifications:t}).then((e=>{const t=e.activity.studentActivity,s=this.courseActivityData.courseActivity,r=this.canViewAllUserData?"components.directives.telemetry.chart.activityTitleInstructor":"components.directives.telemetry.chart.activityTitleStudent",a=this.canViewAllUserData?"components.directives.telemetry.chart.currentStudentActivitySeriesInstructor":"components.directives.telemetry.chart.currentStudentActivitySeriesStudent",i=this.activityTransformer.getTableRows(t,s);this.table=new l.a(i,r,this.createUserNameString()),this.configureStudentSeries(e.activity.studentActivity,e.notifications,this.activityTransformer,a,r,this.chart),this.fireOnDataLoaded()}))}createUserNameTranslationParam(){const e={};return this.canViewAllUserData&&(e.userName=this.$scope.user().ui.displayName),e}createUserNameString(){return this.bbLocalize.formatUsernameSync(this.$scope.user(),i.ILocaleUsernameFormat.Short,this.$scope,{noWrap:!0,noEscape:!0})}fireOnDataLoaded(){this.$scope.onDataLoaded({studentPointCount:this.chart.selectedStudentSeries.data.length,coursePointCount:this.chart.courseAverageSeries.data?this.chart.courseAverageSeries.data.length:0,chartTitle:this.chart.title.text}),this.showData=!0}fireEmptyOnDataLoaded(){this.$scope.onDataLoaded({studentPointCount:0,coursePointCount:0,chartTitle:""})}configureStudentSeries(e,t,s,r,a,i){i.selectedStudentSeries.data=e.map((e=>s.getStudentPoint(e,this.granularity,t))),i.selectedStudentSeries.name=this.bbLocalize.translateSync({locale:this.bbLocalize.getLocale(this.$scope),key:r,params:this.createUserNameTranslationParam(),noWrap:!0,noEscape:!0}),i.selectedStudentSeries.showInLegend=!0,i.title.text=this.bbLocalize.translateSync({locale:this.bbLocalize.getLocale(this.$scope),key:a,params:this.createUserNameTranslationParam(),noWrap:!0,noEscape:!0})}createTimeSeriesConfig(e,t,s,r,a){const n=this,c={options:{chart:{resetZoomButton:{position:{relativeTo:"chart",x:0,y:-51}},zoomType:a?"x":"xy",spacingTop:15,height:400,marginRight:0},legend:{align:"center",verticalAlign:"bottom",itemMarginTop:2,itemMarginBottom:2,backgroundColor:"#F8F8F8"},tooltip:{formatter(){const e=n.$scope.$new(!0);return e.seriesName=this.series.name,e.dateText=n.bbLocalize.translateSync({locale:n.bbLocalize.getLocale(this.scope),key:"components.directives.telemetry.chart.tooltip.date",params:{date:this.x},noWrap:!0,noEscape:!0}),e.yValueText=n.bbLocalize.translateSync({locale:n.bbLocalize.getLocale(this.scope),key:t,params:{value:this.y},noWrap:!0,noEscape:!0}),e.stdDev=this.point.stdDev,e.yValueWithStdDevText=n.bbLocalize.translateSync({locale:n.bbLocalize.getLocale(this.scope),key:s,params:{value:this.y,stdDev:this.point.stdDev},noWrap:!0,noEscape:!0}),e.canViewAllUserData=n.canViewAllUserData,n.telemetryChart.createTooltip(n.timeSeriesTooltip,e)}}},xAxis:{type:"datetime",labels:{formatter(){return n.bbLocalize.formatDateSync(new Date(this.value),i.ILocaleDateFormat.Short)},style:{fontSize:"12px",fontWeight:"600"}}},yAxis:{min:0,minRange:a?100:void 0,maxPadding:a?0:void 0,title:{text:this.bbLocalize.translateSync({locale:this.bbLocalize.getLocale(this.$scope),key:e})},labels:{formatter(){return n.bbLocalize.translateSync({locale:n.bbLocalize.getLocale(this.$scope),key:r,params:{value:this.value}})},style:{fontSize:"12px",fontWeight:"600"}}},title:{text:""},selectedStudentSeries:{type:"line",marker:{symbol:"circle",radius:7},lineWidth:2,showInLegend:!1},courseAverageSeries:{id:"courseAverageSeries",type:"line",marker:{symbol:"circle",radius:4},lineWidth:1,showInLegend:!1},stdDevSeries:{linkedTo:"courseAverageSeries",type:"errorbar",stemWidth:25,whiskerLength:0,color:"rgba(190, 190, 190, .75)",enableMouseTracking:!1}};return c.series=[c.stdDevSeries,c.courseAverageSeries,c.selectedStudentSeries],c}};b=Object(a.a)([Object(a.c)(0,Object(v.b)("$compile")),Object(a.c)(1,Object(v.b)("$q")),Object(a.c)(2,Object(v.b)("$scope")),Object(a.c)(3,Object(v.b)(o.b)),Object(a.c)(4,Object(v.b)(c.b)),Object(a.c)(5,Object(v.b)(n.m.serviceName)),Object(a.c)(6,Object(v.b)(n.Jb.serviceName)),Object(a.c)(7,Object(v.b)(i.serviceName)),Object(a.c)(8,Object(v.b)(h.n))],b);class y extends b{}var g=s("PpBg"),S=s("ZXm/"),f=s("MKC5");s.d(t,"a",(function(){return D}));const D="ultra.directives.timeSeries";class k{constructor(e,t){this.$injector=e,this.$compile=t,this.replace=!0,this.restrict="E",this.controller=y,this.scope={course:"&",user:"&",onDataLoaded:"&",canViewAllUserData:"&",type:"@",reflowChartOn:"&?"},this.link=(e,t,s,r)=>{t.append(this.$compile(Object(d.b)(r.dataType))(e))}}}k.$inject=["$injector","$compile"],r.module(D,["smart-table",o.a,c.a,f.a,g.a,h.m,S.a]).controller("ultra.directive.telemetry.telemetry-time-series.controller",y).directive("bbTelemetryTimeSeries",["$injector",e=>e.instantiate(k)])},"ZXm/":function(e,t,s){"use strict";s("A51O");var r=s("Llzl"),a=s("0JpG"),i=s("Ew9L");s.d(t,"a",(function(){return n}));const n="ultra.directives.userpicker";class c{constructor(e,t,s){this.scope=e,this.element=t,this.bbLocalize=s}userClicked(e){this.scope.userClicked({user:e})}userDetails(e){this.element.find(".mobile-telemetry-list").attr("aria-hidden","true").slideUp(),this.scope.userDetails({user:e})}studentDetails(e){return this.bbLocalize.translateSync({locale:this.bbLocalize.getLocale(this.scope),key:"components.directives.userpicker.details",params:{userName:this.bbLocalize.formatUsernameSync(e)},noWrap:!0,noEscape:!0})}}c.$inject=["scope","element",a.serviceName];class o{constructor(e){this.$injector=e,this.replace=!0,this.restrict="E",this.template=i,this.scope={gridView:"&?",selected:"&?",findUserParam:"&?",userClicked:"&",userDetails:"&",userList:"&",avatarCustomizedActiveStyle:"@?"},this.link=(e,t)=>{e.$watch("findUserParam()",(()=>{e.userList()&&e.userList().forEach((t=>{e.findUserParam&&e.findUserParam()?t.ui.userNameText.toLowerCase().indexOf(e.findUserParam().toLowerCase())>-1?t.ui.searchNotMatched=!1:t.ui.searchNotMatched=!0:t.ui.searchNotMatched=!1}))})),e.userPicker=this.$injector.instantiate(c,{scope:e,element:t})}}}o.$inject=["$injector"],r.module(n,[]).directive("bbUserpicker",["$injector",e=>e.instantiate(o)])},m16R:function(e,t,s){"use strict";s.d(t,"c",(function(){return i})),s.d(t,"a",(function(){return n})),s.d(t,"b",(function(){return c}));var r=s("nsO7");class a{constructor(e,t,s,a){this.rows=e,this.csvHeaders=[{key:"components.directives.telemetry.table.dateColumn"},{key:a},{key:"components.directives.telemetry.table.classIntervalMin"},{key:"components.directives.telemetry.table.classIntervalMax"},{key:t,params:{userName:s},noWrap:!0,noEscape:!0},{key:"components.directives.telemetry.table.classIntervalDiff"}],this.hasDataOutsideInterval=r.some(e,(e=>e.aboveStdDev||e.belowStdDev))}getCsvRows(){return this.rows.map((e=>({date:e.date,courseValue:e.courseValue,intervalMin:e.intervalMin,intervalMax:e.intervalMax,studentValue:e.studentValue,diffFromInterval:this.getDiff(e)})))}getDiff(e){return e.diffFromInterval?e.aboveStdDev?e.diffFromInterval:-e.diffFromInterval:"-"}}class i extends a{constructor(e,t,s){super(e,t,s,"components.directives.telemetry.table.classGradeColumn")}}class n extends a{constructor(e,t,s){super(e,t,s,"components.directives.telemetry.table.classActivityColumn")}}class c{constructor(e){this.rows=e,this.csvHeaders=[{key:"components.directives.telemetry.table.lastNameColumn"},{key:"components.directives.telemetry.table.firstNameColumn"},{key:"components.directives.telemetry.table.studentUserName"},{key:"components.directives.telemetry.table.studentIdColumn"},{key:"components.directives.telemetry.table.gradeColumn"},{key:"components.directives.telemetry.table.activityColumn"},{key:"components.directives.telemetry.table.daysSinceLastAccessColumn"},{key:"components.directives.telemetry.table.lastAccessDate"}]}getCsvRows(){return this.rows.map((e=>{var t,s;const r=null!==(s=null===(t=e.courseMembership)||void 0===t?void 0:t.user)&&void 0!==s?s:e.contextUser;return{familyName:r.familyName,givenName:r.givenName,userName:r.userName,studentId:r.studentId,grade:e.grade,activity:e.activity,inactivityDays:e.daysSinceLastAccess,lastAccessDate:e.lastAccessDate?new Date(e.lastAccessDate):void 0}}))}}},"p/6/":function(e,t){e.exports='<bb-telemetry-student-progress course="::controller.course"\n                               course-color="{{ ::controller.courseColor }}"></bb-telemetry-student-progress>\n'}}]);